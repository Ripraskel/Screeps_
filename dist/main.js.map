{"version":3,"file":"main.js","sources":["../src/constants.js","../src/PopulationManager/skills.js","../src/PopulationManager/assignments.js","../src/PopulationManager/index.js","../src/Utils/pathHelper.js","../src/Worker/skills.js","../src/Worker/assignments.js","../src/ProjectsManager/build.skills.js","../src/ProjectsManager/energy.skills.js","../src/ProjectsManager/repair.skills.js","../src/ProjectsManager/skills.js","../src/ProjectsManager/upgrader.skills.js","../src/ProjectsManager/assignments.js","../src/ProjectsManager/index.js","../src/TaskMaster/skills.js","../src/TaskMaster/assignments.js","../src/TaskMaster/index.js","../src/Worker/index.js","../src/main.js"],"sourcesContent":["/**\r\n * \r\n * @returns { Constants }\r\n */\r\nexport const buildConstants = () => {\r\n    const constants = {\r\n        spawnGoal: {\r\n            workers: 15 // calculate this in future?\r\n        },\r\n        room: Game.spawns['Spawn1'].room,\r\n        spawnName: \"Spawn1\"\r\n    }\r\n\r\n    return constants;\r\n}","/**\r\n * \r\n * @param { string} spawnName \r\n * @returns \r\n */\r\nexport const spawnWorker = (spawnName) => {\r\n    const body_parts = [WORK,CARRY,MOVE];\r\n    const name = 'Worker' + Game.time;\r\n    const role = 'worker';\r\n\r\n    if (Game.spawns[spawnName].spawnCreep(body_parts, name, { memory: {role, project: {}} }) === 0) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const spawnSoldier = (spawnName) => {\r\n    const body_parts = [ATTACK,ATTACK,MOVE, MOVE];\r\n    const name = 'Soldier' + Game.time;\r\n    const role = 'soldier';\r\n\r\n    if (Game.spawns[spawnName].spawnCreep(body_parts, name, { memory: {role, project: {}} }) === 0) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Clears up the Memory of fallen creeps\r\n */\r\nexport const reapTheDead = (room) => {\r\n    for(const name in Memory.creeps) {\r\n        if(!Game.creeps[name]) {\r\n            let projects = room.memory.projects;\r\n            projects.forEach((project, projIndex) => {\r\n                let deadWorkerIndices = [];\r\n                project.workerIds.forEach((workerId, deadIndex) => {\r\n                    if (workerId === name) {\r\n                        deadWorkerIndices.push(deadIndex);\r\n                    }\r\n                });\r\n                deadWorkerIndices.reverse().forEach((deadIndex) =>  {\r\n                    room.memory.projects[projIndex].workerIds.splice(deadIndex, 1);\r\n                })\r\n            });\r\n            \r\n            delete Memory.creeps[name];\r\n            console.log('Clearing non-existing creep memory:', name);\r\n        }\r\n    }\r\n}","import { spawnWorker, reapTheDead } from \"./skills\";\r\n\r\n/**\r\n * \r\n * @param {Constants} constants \r\n */\r\nexport const manageWorkerPopulation = (constants) => {\r\n    const workers = _.filter(Game.creeps, (creep) => creep.memory.role == 'worker');\r\n\r\n    if (workers.length < constants.spawnGoal.workers) {\r\n        spawnWorker(constants.spawnName);\r\n    } else {\r\n        // do nothing\r\n    }\r\n}\r\n\r\nexport const reaperDuties = (room) => {\r\n    // FUTURE: extend assignment to kill unrequired creeps\r\n    reapTheDead(room);\r\n}","import { manageWorkerPopulation, reaperDuties } from \"./assignments\";\r\n\r\nexport const PopulationManager = {\r\n    /**\r\n     * \r\n     * @param {Constants} constants \r\n     */\r\n    run: (constants) => {\r\n        manageWorkerPopulation(constants);\r\n        reaperDuties(constants.room);\r\n    }\r\n}","/**\r\n * \r\n * @param { [][] } paths \r\n * @returns { number } index of shortest path / array\r\n */\r\n export const getShortestPath = (paths) => {\r\n    let distance = 0;\r\n    let shortestPathIndex = 0;\r\n \r\n    paths.forEach((path, index) => {\r\n       if (index === 0) {\r\n          distance = path.length\r\n       }\r\n       if (path.length < distance) {\r\n          shortestPathIndex = index\r\n       }\r\n    })\r\n \r\n    return shortestPathIndex;\r\n }","export const harvest = (creep, energySource, energyContainer) => {\r\n    if(creep.store.getFreeCapacity() > 0) {\r\n        if(creep.harvest(energySource) == ERR_NOT_IN_RANGE) {\r\n            creep.moveTo(energySource, {visualizePathStyle: {stroke: '#ffaa00'}});\r\n        }\r\n    }\r\n    else {\r\n        if(creep.transfer(energyContainer, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n            creep.moveTo(energyContainer, {visualizePathStyle: {stroke: '#ffffff'}});\r\n        }\r\n    }\r\n};\r\n\r\nexport const build = (creep, energySource, constructionSite) => {\r\n    if(creep.memory.building && creep.store[RESOURCE_ENERGY] == 0) {\r\n        creep.memory.building = false;\r\n        creep.say('⛏ harvest');\r\n    }\r\n    if(!creep.memory.building && creep.store.getFreeCapacity() == 0) {\r\n        creep.memory.building = true;\r\n        creep.say('🔨 build');\r\n    }\r\n    \r\n    if(!creep.memory.building) {\r\n        if(creep.harvest(energySource) == ERR_NOT_IN_RANGE) {\r\n            creep.moveTo(energySource, {visualizePathStyle: {stroke: '#ffaa00'}});\r\n        }\r\n    }\r\n    else {\r\n        if(creep.build(constructionSite) == ERR_NOT_IN_RANGE) {\r\n            creep.moveTo(constructionSite, {visualizePathStyle: {stroke: '#ffffff'}});\r\n        }\r\n    }\r\n};\r\n\r\nexport const upgrade = (creep, energySource) => {\r\n    if(creep.memory.upgrading && creep.store[RESOURCE_ENERGY] == 0) {\r\n        creep.memory.upgrading = false;\r\n        creep.say('🔄 harvest');\r\n    }\r\n    if(!creep.memory.upgrading && creep.store.getFreeCapacity() == 0) {\r\n        creep.memory.upgrading = true;\r\n        creep.say('⚡ upgrade');\r\n    }\r\n\r\n    if(creep.memory.upgrading) {\r\n        if(creep.upgradeController(creep.room.controller) == ERR_NOT_IN_RANGE) {\r\n            creep.moveTo(creep.room.controller, {visualizePathStyle: {stroke: '#ffffff'}});\r\n        }\r\n    }\r\n    else {\r\n        if(creep.harvest(energySource) == ERR_NOT_IN_RANGE) {\r\n            creep.moveTo(energySource, {visualizePathStyle: {stroke: '#ffaa00'}});\r\n        }\r\n    }\r\n};\r\n\r\nexport const repair = (creep, energySource, damagedStructure) => {\r\n    if(creep.memory.repairing && creep.store[RESOURCE_ENERGY] == 0) {\r\n        creep.memory.repairing = false;\r\n        creep.say('⛏ harvest');\r\n    }\r\n    if(!creep.memory.repairing && creep.store.getFreeCapacity() == 0) {\r\n        creep.memory.repairing = true;\r\n        creep.say('🛠 repair');\r\n    }\r\n    \r\n    if(!creep.memory.repairing) {\r\n        if(creep.harvest(energySource) == ERR_NOT_IN_RANGE) {\r\n            creep.moveTo(energySource, {visualizePathStyle: {stroke: '#ffaa00'}});\r\n        }\r\n    }\r\n    else {\r\n        if(creep.repair(damagedStructure) == ERR_NOT_IN_RANGE) {\r\n            creep.moveTo(damagedStructure, {visualizePathStyle: {stroke: '#ffffff'}});\r\n        }\r\n    }\r\n};\r\n","import { harvest, build, upgrade, repair } from \"./skills\";\r\n\r\nexport const worker_assignment_type = {\r\n    HARVEST: 'HARVEST',\r\n    BUILD: 'BUILD',\r\n    UPGRADE: 'UPGRADE',\r\n    REPAIR: 'REPAIR'\r\n};\r\n/**\r\n * \r\n * @param {Creep} creep \r\n */\r\nexport const doAssignment = (creep) => {\r\n    const energySource = Game.getObjectById(creep.memory.project.energySourceId);\r\n   switch (creep.memory.project.assignmentType) {\r\n       case worker_assignment_type.HARVEST:\r\n            harvest(creep, energySource,  Game.structures[creep.memory.project.taskDestinationId]);\r\n            break;\r\n        case worker_assignment_type.BUILD:\r\n            build(creep, energySource,  Game.constructionSites[creep.memory.project.taskDestinationId]);\r\n            break;\r\n        case worker_assignment_type.UPGRADE:\r\n            upgrade(creep, energySource);\r\n            break;\r\n        case worker_assignment_type.REPAIR:\r\n            repair(creep, energySource,  Game.getObjectById(creep.memory.project.taskDestinationId));\r\n            break;\r\n        default:\r\n            harvest(creep, energySource,  Game.structures[creep.memory.project.taskDestinationId]);\r\n            break;\r\n   }\r\n};","import {getShortestPath} from '../Utils/pathHelper';\r\nimport { worker_assignment_type } from '../Worker/assignments';\r\n\r\n/**\r\n * \r\n * @param {Room} room \r\n * @returns { Project[] } Array of Build Projects\r\n */\r\n export const getAllActiveBuildProjects = (room) => {\r\n    const buildingSites = room.find(FIND_MY_CONSTRUCTION_SITES);\r\n \r\n    const energySources = room.find(FIND_SOURCES_ACTIVE);\r\n \r\n    const projects = buildingSites.map(buildingSite => { \r\n       const paths = energySources.map(source => {\r\n          return room.findPath(source.pos, buildingSite.pos);\r\n       })\r\n       return {\r\n          assignmentType: worker_assignment_type.BUILD,\r\n          energySourceId: energySources[getShortestPath(paths)].id,\r\n          taskDestinationId: buildingSite.id,\r\n          workerIds: []\r\n       };\r\n    });\r\n \r\n    return projects;\r\n }","import {getShortestPath} from '../Utils/pathHelper';\r\nimport { worker_assignment_type } from '../Worker/assignments';\r\n\r\n/**\r\n * \r\n * @param {Room} room \r\n * @returns { Project[] } Array of Harvest Projects\r\n */\r\n export const getAllActiveEnergyProjects = (room) => {\r\n    const energyContainers = room.find(FIND_MY_STRUCTURES, {\r\n       filter: (structure) => {\r\n          return (structure.structureType == STRUCTURE_SPAWN || structure.structureType == STRUCTURE_EXTENSION && \r\n            structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0);\r\n       }\r\n    });\r\n \r\n    const energySources = room.find(FIND_SOURCES_ACTIVE);\r\n \r\n    const projects = energyContainers.map(energyContainer => { \r\n       const paths = energySources.map(source => {\r\n          return room.findPath(source.pos, energyContainer.pos);\r\n       })\r\n       return {\r\n          assignmentType: worker_assignment_type.HARVEST,\r\n          energySourceId: energySources[getShortestPath(paths)].id,\r\n          taskDestinationId: energyContainer.id,\r\n          workerIds: []\r\n       };\r\n    });\r\n \r\n    return projects;\r\n }","import {getShortestPath} from '../Utils/pathHelper';\r\nimport { worker_assignment_type } from '../Worker/assignments';\r\n\r\n/**\r\n * \r\n * @param {Room} room \r\n * @returns { Project[] } Array of Repair Projects\r\n */\r\n export const getAllActiveRepairProjects = (room) => {\r\n   const repairSites = room.find(FIND_STRUCTURES, {\r\n      filter: (structure) => {\r\n         switch (structure.structureType) {\r\n            case STRUCTURE_WALL:\r\n               return structure.hits/structure.hitsMax < 0.0001;\r\n            default:\r\n               return structure.hits < structure.hitsMax;\r\n         }\r\n      }\r\n   });\r\n \r\n    const energySources = room.find(FIND_SOURCES_ACTIVE);\r\n \r\n    const projects = repairSites.map(repairSite => { \r\n       const paths = energySources.map(source => {\r\n          return room.findPath(source.pos, repairSite.pos);\r\n       })\r\n       return {\r\n          assignmentType: worker_assignment_type.REPAIR,\r\n          energySourceId: energySources[getShortestPath(paths)].id,\r\n          taskDestinationId: repairSite.id,\r\n          workerIds: []\r\n       };\r\n    });\r\n \r\n    return projects;\r\n }","/**\r\n * \r\n * @param { Project[]} storedProjects\r\n * @param { Project[]} activeProjects \r\n * \r\n */\r\n export const addActiveProjectsToStorage = (storedProjects, activeProjects) => {\r\n    let updatedProjects = storedProjects;\r\n    const newActiveProjects = [];\r\n\r\n    activeProjects.forEach((activeProject) => {\r\n       let newProject = true;\r\n \r\n       // check if project already stored\r\n       storedProjects.forEach((storedProject, index) => {\r\n          if (activeProject.taskDestinationId === storedProject.taskDestinationId &&\r\n              activeProject.assignmentType === storedProject.assignmentType) {\r\n             newProject = false;\r\n          }\r\n       });\r\n \r\n       // Add new project to list\r\n       if (newProject) {\r\n            newActiveProjects.push(activeProject);\r\n       }\r\n    })\r\n \r\n    updatedProjects = updatedProjects.concat(newActiveProjects);\r\n\r\n    // update stored projects\r\n    Object.assign(storedProjects, updatedProjects);\r\n }\r\n\r\n /**\r\n * \r\n * @param { Project[]} storedProjects\r\n * @param { Project[]} activeProjects \r\n * \r\n * @returns { string[]} Workers on removed projects\r\n * \r\n * Removes the inactive projects from the storedProjects passed in be reference\r\n */\r\nexport const removeInactiveProjectsFromStorage = (storedProjects, activeProjects) => {\r\n    let updatedProjects = storedProjects;\r\n    let toBeRemovedProjectIndices = [];\r\n    let workersOnRemovedProjects = [];\r\n\r\n    storedProjects.forEach((storedProject, storedProjectIndex) => {\r\n        let projectStillActive = false;\r\n        // check if project still active\r\n        activeProjects.forEach((activeProject) => {\r\n            if (activeProject.taskDestinationId === storedProject.taskDestinationId &&\r\n                activeProject.assignmentType === storedProject.assignmentType) {\r\n                projectStillActive = true;\r\n            }\r\n        });\r\n\r\n        if (!projectStillActive) {\r\n            toBeRemovedProjectIndices.push(storedProjectIndex);\r\n        }\r\n    });\r\n\r\n    // Use reverse as to not affect index positions when splicing\r\n    toBeRemovedProjectIndices.reverse().forEach(index => {\r\n        // Add workers on to be deleted project to list\r\n        workersOnRemovedProjects = workersOnRemovedProjects.concat(storedProjects[index].workerIds);\r\n\r\n        // Remove the project from storeProjects\r\n        updatedProjects.splice(index, 1);\r\n    });\r\n\r\n    // Update master copy of storedProjects\r\n    Object.assign(storedProjects, updatedProjects);\r\n\r\n    return workersOnRemovedProjects;\r\n};\r\n","import {getShortestPath} from '../Utils/pathHelper';\r\nimport { worker_assignment_type } from '../Worker/assignments';\r\n\r\n/**\r\n* \r\n* @param {Room} room \r\n* @returns { Project[] } Array of Upgrade Projects\r\n*/\r\nexport const getAllActiveUpgradeProjects = (room) => {\r\n   if (room.controller) {\r\n      const energySources = room.find(FIND_SOURCES_ACTIVE);\r\n \r\n      const paths = energySources.map(source => {\r\n         return room.findPath(source.pos, room.controller.pos);\r\n      })\r\n\r\n      return [{\r\n         assignmentType: worker_assignment_type.UPGRADE,\r\n         energySourceId: energySources[getShortestPath(paths)].id,\r\n         taskDestinationId: null,\r\n         workerIds: []\r\n      }];\r\n \r\n   } else {\r\n      return []\r\n   }\r\n }","import { getAllActiveBuildProjects } from \"./build.skills\";\r\nimport { getAllActiveEnergyProjects } from \"./energy.skills\";\r\nimport { getAllActiveRepairProjects } from \"./repair.skills\";\r\nimport { addActiveProjectsToStorage, removeInactiveProjectsFromStorage } from \"./skills\";\r\nimport { getAllActiveUpgradeProjects } from \"./upgrader.skills\";\r\n\r\n/**\r\n * @param {Room} room\r\n * @returns { Project[] }\r\n */\r\nexport const manageProjects = (room) => {\r\n    // Build up list of active Projects\r\n    const activeProjects = getAllActiveEnergyProjects(room).concat(getAllActiveBuildProjects(room), getAllActiveUpgradeProjects(room), getAllActiveRepairProjects(room));\r\n\r\n    // Get stored projects in memory\r\n    const storedProjects = room.memory.projects ? room.memory.projects : [];\r\n\r\n    // Remove inactive projects from storage and keep track of workers affected\r\n    const workersOnRemovedProjects = removeInactiveProjectsFromStorage(storedProjects,  activeProjects);\r\n\r\n    // Add new active projects to the stored projects\r\n    addActiveProjectsToStorage(storedProjects,  activeProjects);\r\n\r\n    // Update room memory\r\n    room.memory.projects = storedProjects;\r\n\r\n    // Release workers from deleted projects\r\n    workersOnRemovedProjects.forEach((id) => {\r\n        Game.creeps[id].memory.project = {};\r\n    })\r\n\r\n}","import { manageProjects } from './assignments';\r\n\r\nexport const ProjectsManager = {\r\n    /**\r\n    * \r\n    * @param {Constants} constants \r\n    */\r\n    run: (constants) => {\r\n        manageProjects(constants.room);\r\n    }\r\n}","import { worker_assignment_type } from '../Worker/assignments';\r\nimport { getShortestPath } from '../Utils/pathHelper';\r\n\r\n/**\r\n * \r\n * @param { Project[]} projects \r\n * @param {number} numberOfWorkers \r\n * \r\n * @returns {string[]} UnassignedWorkers\r\n */\r\nexport const fixProjectOverAssignment = (projects, numberOfWorkers) => {\r\n   let updatedProjects = projects;\r\n   let unassignedWorkers = [];\r\n\r\n   // nothing to do if there are no projects\r\n   if (projects.length === 0) {\r\n      return unassignedWorkers;\r\n   }\r\n\r\n   const workersPerProject = Math.floor(numberOfWorkers / projects.length);\r\n   const workerRemainder = numberOfWorkers % projects.length;\r\n\r\n   // remove excess workers from projects and push to unassigned workers pool\r\n   projects.forEach((project, index) => {\r\n      // Build up project allowance based on base workers per project and any overflow\r\n      const numberOfWorkersAllowance = workersPerProject + (workerRemainder !== 0 && workerRemainder -1 >= index ? 1 : 0 );\r\n      \r\n      const currentNumberOfWorkers = project.workerIds.length;\r\n\r\n      if ( currentNumberOfWorkers > numberOfWorkersAllowance ) {\r\n         const numberOfExcessWorkers = currentNumberOfWorkers - numberOfWorkersAllowance;\r\n\r\n         const releasedWorkers = updatedProjects[index].workerIds.splice(-numberOfExcessWorkers, numberOfExcessWorkers);\r\n\r\n         // update workers project\r\n         releasedWorkers.forEach((workerId) => {\r\n            Game.creeps[workerId].memory.project = {};\r\n         })\r\n\r\n         unassignedWorkers = unassignedWorkers.concat(releasedWorkers);\r\n      } else {\r\n            // do nothing\r\n      }\r\n   });\r\n\r\n   // Update master copy of projects\r\n   Object.assign(projects, updatedProjects)\r\n\r\n   return unassignedWorkers;\r\n}\r\n\r\n/**\r\n * \r\n * @param { Project[]} projects \r\n * @param {number} numberOfWorkers\r\n * @param {string[]} unassignedWorkers\r\n * \r\n */\r\n export const taskUnassignedWorkers = (projects, numberOfWorkers, unassignedWorkers) => {\r\n   // nothing to do if there are no projects\r\n   if (projects.length) {\r\n      let updatedProjects = projects;\r\n      const workersPerProject = Math.floor(numberOfWorkers / projects.length);\r\n      const workerRemainder = numberOfWorkers % projects.length;\r\n\r\n      // push to unassigned workers to project space\r\n      projects.forEach((project, index) => {\r\n         // Build up project allowance based on base workers per project and any overflow\r\n         const numberOfWorkersAllowance = workersPerProject + (workerRemainder !== 0 && workerRemainder -1 >= index ? 1 : 0 );\r\n         \r\n         const currentNumberOfWorkers = project.workerIds.length;\r\n\r\n         if ( currentNumberOfWorkers < numberOfWorkersAllowance ) {\r\n            const numberOfSpareSlots =  numberOfWorkersAllowance - currentNumberOfWorkers;\r\n            const projectNewWorkers = unassignedWorkers.splice(-numberOfSpareSlots, numberOfSpareSlots);\r\n            \r\n            // update workers project\r\n            projectNewWorkers.forEach((workerId) => {\r\n                Game.creeps[workerId].memory.project = project;\r\n            })\r\n            \r\n            // update project record\r\n            updatedProjects[index].workerIds = project.workerIds.concat(projectNewWorkers);\r\n         } else {\r\n               // do nothing\r\n         }\r\n      });\r\n      \r\n      // Update master copy of projects\r\n      Object.assign(projects, updatedProjects)\r\n   }\r\n\r\n}","import { fixProjectOverAssignment, taskUnassignedWorkers } from './skills';\r\n\r\n/**\r\n * \r\n * @param {Room} room \r\n */\r\nexport const manageWorkers = (room) => {\r\n    // find already idle workers\r\n    const allWorkers = [];\r\n    let idleWorkers = [];\r\n    for(const name in Game.creeps) {\r\n        const creep = Game.creeps[name];\r\n        if (creep.memory.role === 'worker') {\r\n            allWorkers.push(name);\r\n            if(!creep.memory.project.assignmentType) {\r\n                idleWorkers.push(name);\r\n            }\r\n        }\r\n    };\r\n\r\n    // get stored projects from memory\r\n    const storeProjects = room.memory.projects ? room.memory.projects : []; \r\n\r\n    // remove workers from overassigned projects\r\n    // add freed up worker to idleWorkers list\r\n    idleWorkers = idleWorkers.concat(fixProjectOverAssignment(storeProjects, allWorkers.length));\r\n\r\n    taskUnassignedWorkers(storeProjects, allWorkers.length, idleWorkers);\r\n\r\n    // update room memory\r\n    room.memory.projects = storeProjects;\r\n}","import { manageWorkers } from \"./assignments\";\r\n\r\nexport const TaskMaster = {\r\n    /**\r\n    * \r\n    * @param {Constants} constants \r\n    */\r\n    run: (constants) => {\r\n        manageWorkers(constants.room);\r\n    }\r\n}","import { doAssignment } from \"./assignments\";\r\n\r\nexport const Workers = {\r\n    run: () => {\r\n        // execute work\r\n        for(var name in Game.creeps) {\r\n            var creep = Game.creeps[name];\r\n            if(creep.memory.role === 'worker' && creep.memory.project.assignmentType) {\r\n                doAssignment(creep);\r\n            }\r\n        }\r\n    }\r\n}","\r\nimport { buildConstants } from \"./constants\";\r\n\r\nimport { PopulationManager } from \"./PopulationManager/index\";\r\nimport { ProjectsManager } from \"./ProjectsManager\";\r\nimport { TaskMaster } from \"./TaskMaster\";\r\nimport { Workers } from \"./Worker\";\r\n\r\n\r\nmodule.exports.loop = function () {\r\n\r\n    const constants = buildConstants();\r\n\r\n    PopulationManager.run(constants);\r\n    ProjectsManager.run(constants);\r\n    TaskMaster.run(constants);\r\n    Workers.run();\r\n\r\n}"],"names":[],"mappings":"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"}